// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCC.Db;

#nullable disable

namespace TCC.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221210041855_passwordHash")]
    partial class passwordHash
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IdentityUserClaim");
                });

            modelBuilder.Entity("TCC.Areas.Identity.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8be495b8-fff3-4e69-bf17-4a35e38cd52d",
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 54, 946, DateTimeKind.Local).AddTicks(329),
                            Email = "eduardo@eduardo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$.igG358.7M7FosKnGr2Og.ufde93RSKxnp7b4UYM2y1VT7JfHotoG",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a76d344-65b6-4474-99e7-ff09a9d58691",
                            TwoFactorEnabled = false,
                            UserName = "eduardo@eduardo.com",
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98d6f846-8ddc-4dac-b815-04bcd696b20d",
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8160),
                            Email = "paulo@paulo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$nrolKsVmdNVwX2MASJIUdeTrFfXsKLmvER2g8l3vadOjlQugV0Oui",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1a59ffd-9cf6-4ce4-820d-7f457fe28daa",
                            TwoFactorEnabled = false,
                            UserName = "paulo@paulo.com",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("TCC.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 2000.0,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8635),
                            IconId = 1,
                            Name = "Conta corrente",
                            UserId = 1,
                            isDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Balance = 233.33000000000001,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8637),
                            IconId = 2,
                            Name = "Conta PJ",
                            UserId = 2,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("TCC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasDiscriminator<string>("Type").HasValue("Category");
                });

            modelBuilder.Entity("TCC.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("double");

                    b.Property<double>("FinalBalance")
                        .HasColumnType("double");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8880),
                            CurrentBalance = 400.0,
                            FinalBalance = 2000.0,
                            FinalDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconId = 1,
                            IsCompleted = false,
                            IsDeleted = false,
                            Name = "Viagem",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8883),
                            CurrentBalance = 12000.32,
                            FinalBalance = 35000.720000000001,
                            FinalDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconId = 2,
                            IsCompleted = false,
                            IsDeleted = false,
                            Name = "Carro",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TCC.Models.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Icons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "img1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ImageName = "img2.jpg"
                        });
                });

            modelBuilder.Entity("TCC.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("Type").HasValue("Transaction");
                });

            modelBuilder.Entity("TCC.Models.Expense", b =>
                {
                    b.HasBaseType("TCC.Models.Transaction");

                    b.Property<bool>("isPaid")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Expense");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Category = 13,
                            CategoryId = 1,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8827),
                            Description = "Mercado",
                            TransactionDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8827),
                            UserId = 1,
                            Value = 250.0,
                            isDeleted = false,
                            isPaid = true
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            Category = 11,
                            CategoryId = 2,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8830),
                            Description = "Alaminuta",
                            TransactionDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8831),
                            UserId = 2,
                            Value = 172.34999999999999,
                            isDeleted = false,
                            isPaid = false
                        });
                });

            modelBuilder.Entity("TCC.Models.ExpenseCategory", b =>
                {
                    b.HasBaseType("TCC.Models.Category");

                    b.HasDiscriminator().HasValue("ExpenseCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8730),
                            Description = "Gym",
                            IconId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8731),
                            Description = "Clothing",
                            IconId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8732),
                            Description = "Education",
                            IconId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8733),
                            Description = "Pet",
                            IconId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8734),
                            Description = "Electronics",
                            IconId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8734),
                            Description = "Health",
                            IconId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8735),
                            Description = "Home",
                            IconId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8736),
                            Description = "Taxes",
                            IconId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8737),
                            Description = "Leisure",
                            IconId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8738),
                            Description = "Others",
                            IconId = 10
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8738),
                            Description = "Restaurant",
                            IconId = 11
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8741),
                            Description = "Services",
                            IconId = 12
                        },
                        new
                        {
                            Id = 13,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8741),
                            Description = "Supermarket",
                            IconId = 13
                        },
                        new
                        {
                            Id = 14,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8742),
                            Description = "Transportation",
                            IconId = 14
                        },
                        new
                        {
                            Id = 15,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8743),
                            Description = "Travel",
                            IconId = 15
                        });
                });

            modelBuilder.Entity("TCC.Models.Income", b =>
                {
                    b.HasBaseType("TCC.Models.Transaction");

                    b.Property<bool>("isReceived")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Income");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            Category = 19,
                            CategoryId = 3,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8853),
                            Description = "Salário",
                            TransactionDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8854),
                            UserId = 1,
                            Value = 2000.0,
                            isDeleted = false,
                            isReceived = true
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 2,
                            Category = 16,
                            CategoryId = 4,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8856),
                            Description = "Premio",
                            TransactionDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8856),
                            UserId = 2,
                            Value = 13.75,
                            isDeleted = false,
                            isReceived = false
                        });
                });

            modelBuilder.Entity("TCC.Models.IncomeCategory", b =>
                {
                    b.HasBaseType("TCC.Models.Category");

                    b.HasDiscriminator().HasValue("IncomeCategory");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8792),
                            Description = "Awards",
                            IconId = 16
                        },
                        new
                        {
                            Id = 17,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8794),
                            Description = "Gift",
                            IconId = 17
                        },
                        new
                        {
                            Id = 18,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8795),
                            Description = "Investments",
                            IconId = 18
                        },
                        new
                        {
                            Id = 19,
                            CreationDate = new DateTime(2022, 12, 10, 1, 18, 55, 145, DateTimeKind.Local).AddTicks(8796),
                            Description = "Salary",
                            IconId = 19
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
